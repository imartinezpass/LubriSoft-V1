@page "/clientes"

@using LubriSoft.Entities
@using LubriSoft.Models
@using LubriSoft.Services

@inject ILubriSoftServices DbServices
@inject ToastService ToastService

@rendermode InteractiveServer

<PageTitle>Clientes</PageTitle>

<div class="row mb-3">
    <div class="col-lg-12 mx-auto pt-2 pb-3 border">
        <h1 class="mb-0" style="text-align:center">Clientes</h1>
        <h4 class="mb-0" style="text-align:center">Alta y Gestion</h4>
        <hr />
        <div class="row">
            <div class="col-xl-9">
                <ClientesForm OnValidatedForm="HandleClienteAdded" ClienteModel="ClienteModel" FormId="ClientesAdd" />
            </div>
            <div class="col-xl-3 mb-3">
                <div class="d-flex h-100">
                    <button form="ClientesAdd" class="w-100 btn btn-lg btn-dark">Cargar</button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-9">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="BusquedaCliente" class="form-control" placeholder="" maxlength="50" style="text-transform:uppercase" />
                    <label>Buscar cliente (nombre o telefono)</label>
                </div>
            </div>
            <div class="col-xl-3 mb-3">
                <div class="d-flex h-100">
                    <button form="ClienteSearch" class="w-100 btn btn-lg btn-success" @onclick="PerformSearchCliente">
                        @if (Searching)
                        {
                            <div class="d-flex justify-content-center">
                                <Spinner Type="SpinnerType.Border" />
                            </div>
                        }
                        else
                        {
                            <span>Buscar</span>
                        }
                    </button>
                </div>
            </div>
        </div>
        <hr class="mt-0"/>
        <ClientesTable Clientes="Clientes" ClientesFiltrados="ClientesFiltrados" Vehiculos="Vehiculos" />  
    </div>      
</div>

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

@code {

    public List<Vehiculo> Vehiculos { get; set; } = new();
    public List<Cliente> Clientes { get; set; } = new();
    public List<Cliente> ClientesFiltrados { get; set; } = new();

    public ClienteViewModel ClienteModel { get; set; } = new();

    public string BusquedaCliente = string.Empty;
    public bool Searching = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Vehiculos = await DbServices.SearchVehiculosConClientes();
            Clientes = await DbServices.ReadAllClientes();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task PerformSearchCliente()
    {
        Searching = true;
        StateHasChanged();

        await Task.Delay(500);

        if (BusquedaCliente!.Any(char.IsDigit))
        {
            ClientesFiltrados = Clientes.Where(c => c.Telefono.Contains(BusquedaCliente!.ToUpper())).ToList();
        }
        else
        {
            ClientesFiltrados = Clientes.Where(c => c.Nombre.Contains(BusquedaCliente!.ToUpper())).ToList();
        }
        
        Searching = false;
        StateHasChanged();
    }

    //Create Cliente
    private async void HandleClienteAdded(Entities.Cliente newCliente)
    {
        var result = await DbServices.CreateCliente(newCliente);

        if (result == 0)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: ya existe un cliente cargado con ese numero de telefono"));
        }
        else
        {
            Clientes.Add(newCliente); //Actualiza la UI sin refrescar
            Clientes = Clientes.OrderBy(x => x.Nombre).ToList(); //Ordena la UI sin refrescar

            ClientesFiltrados.Add(newCliente); //Actualiza la UI sin refrescar
            ClientesFiltrados = ClientesFiltrados.OrderBy(x => x.Nombre).ToList(); //Ordena la UI sin refrescar

            ClienteModel = new();

            ToastService.Notify(new(ToastType.Success, $"Se agregó un cliente nuevo"));
        }

        StateHasChanged();
    }

}