@page "/ajustes"

@using LubriSoft.Entities
@using LubriSoft.Models
@using LubriSoft.Services

@inject ILubriSoftServices DbServices
@inject ToastService ToastService

@rendermode InteractiveServer

<PageTitle>Ajustes</PageTitle>

<div class="row mb-3 border">
    <div class="col-lg-12 mx-auto pt-2 mb-1">
        <AceitesControl Aceites="Aceites" Marcas="Marcas" />
    </div>
    <div class="col-lg-12 mx-auto pt-2 mb-1">
        <ModelosControl Modelos="Modelos" Fabricantes="Fabricantes" />
    </div>
    <div class="col-xxl-6 mx-auto pt-2 mb-1">
        <MarcasControl Marcas="Marcas" OnMarcaChanged="ActualizarMarcas" />
    </div>
    <div class="col-xxl-6 mx-auto pt-2 mb-1">
        <FabricantesControl Fabricantes="Fabricantes" OnFabricanteChanged="ActualizarFabricantes" />
    </div>
</div>

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

@code {

    public List<Marca> Marcas { get; set; } = new();
    public List<Aceite> Aceites { get; set; } = new();
    public List<Fabricante> Fabricantes { get; set; } = new();
    public List<Modelo> Modelos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Marcas = await DbServices.ReadAllMarcas();
            Aceites = await DbServices.ReadAllAceites();
            Fabricantes = await DbServices.ReadAllFabricantes();
            Modelos = await DbServices.ReadAllModelos();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task ActualizarMarcas()
    {
        Marcas = await DbServices.ReadAllMarcas();
        Marcas = Marcas.OrderBy(m => m.Nombre).ToList();
        StateHasChanged();
    }

    private async Task ActualizarFabricantes()
    {
        Fabricantes = await DbServices.ReadAllFabricantes();
        Fabricantes = Fabricantes.OrderBy(f => f.Nombre).ToList();
        StateHasChanged();
    }

}