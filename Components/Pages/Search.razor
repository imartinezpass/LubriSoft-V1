@page "/search"

@using LubriSoft.Data
@using LubriSoft.Entities
@using LubriSoft.Services

@inject ILubriSoftServices DbServices
@inject ToastService ToastService
@inject LubriSoftDataContext Context

@rendermode InteractiveServer

<PageTitle>Buscador</PageTitle>

<div class="row">
    <div class="col-lg-12 mx-auto pt-2 pb-3 border" style="margin-bottom:1.1rem">
        <h1 class="mb-0" style="text-align:center">Buscador</h1>
        <h4 class="mb-0" style="text-align:center">Vehiculos y Trabajos</h4>
        <hr />
        <div class="row">
            <div class="col-xl-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="TypeSearch" class="form-control">
                        <option value="2">Por Campo</option>
                        <option value="1">Por Fecha</option>
                    </InputSelect>
                    <label>Tipo de Busqueda</label>
                </div>
            </div>
            <div class="col-xl-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="TypeField" class="form-control" disabled="@(TypeSearch == 1)">
                        <option value="0">Patente</option>
                        <option value="1">Modelo</option>
                    </InputSelect>
                    <label>Campo a Buscar</label>
                </div>
            </div>
        </div>
        <div class="form-floating mb-3">
            @if(TypeSearch == 1)
            {
                <InputDate @bind-Value="DateField" class="form-control" />
                <label>Fecha</label>
            }
            else
            {
                <InputText @bind-Value="SearchField" class="form-control" placeholder="" maxlength="50" style="text-transform:uppercase" />
                <label>Busqueda</label>
            }
        </div>
        <button class="w-100 btn btn-lg btn-dark" @onclick="PerformSearch">Buscar</button>
        <hr />
        <div>
            @if (!searching)
            {
                <div class="mb-3">
                    <VehiculosTable Vehiculos="Vehiculos" Fabricantes="Fabricantes" Modelos="Modelos" Clientes="Clientes" />
                </div>
                <div class="mb-3">
                    <ServiceTable OilServices="ServiciosAceite" Aceites="Aceites" OnDelete="UpdateVehiculos" />
                </div>
                <div>
                    <MecanicaTable MecanicaServices="ServiciosMecanica" OnDelete="UpdateVehiculos" />
                </div>    
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <Spinner Type="SpinnerType.Border" />
                </div>
            }
        </div>
    </div>
</div>

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

@code {

    public List<Aceite> Aceites { get; set; } = new();
    public List<Cliente> Clientes { get; set; } = new();
    public List<Fabricante> Fabricantes { get; set; } = new();
    public List<Mecanica> ServiciosMecanica { get; set; } = new();
    public List<Modelo> Modelos { get; set; } = new();
    public List<Service> ServiciosAceite { get; set; } = new();
    public List<Vehiculo> Vehiculos { get; set; } = new();

    public bool searching = false;
    public DateTime DateField = DateTime.Now;
    public string SearchField = string.Empty;
    public int TypeSearch = 2; //Tipo de busqueda: 1 Fecha - 2 Campo
    public int TypeField = 0; //Tipo de campo: 0 Patente - 1 Modelo

    protected override async Task OnInitializedAsync()
    {      
        try
        {
            Aceites = await DbServices.ReadAllAceites();
            Fabricantes = await DbServices.ReadAllFabricantes();
            Modelos = await DbServices.ReadAllModelos();
            Clientes = await DbServices.ReadAllClientes();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    public async Task PerformSearch()
    {
        var NormalizedSearchField = SearchField.Trim();

        if (TypeSearch == 2 && (NormalizedSearchField.Length < 2 || NormalizedSearchField.Contains(" ")))
        {
            ToastService.Notify(new(ToastType.Warning, "Ingrese al menos 2 caracteres sin espacios para buscar"));
        }
        else
        {
            searching = true;
            StateHasChanged();

            await Task.Delay(500);

            if (TypeSearch == 1)
            {
                ServiciosAceite = await DbServices.ReadServiceByDate(DateField);
                ServiciosMecanica = await DbServices.ReadMecanicaByDate(DateField);
                GetVehiculos();
            }
            else
            {
                ServiciosAceite = await DbServices.SearchService(TypeField, SearchField.Trim());
                ServiciosMecanica = await DbServices.SearchMecanica(TypeField, SearchField.Trim());
                Vehiculos = await DbServices.SearchVehiculos(TypeField, SearchField.Trim());              
            }

            searching = false;
            StateHasChanged();
        }   
    }

    public void UpdateVehiculos()
    {
        GetVehiculos();
        StateHasChanged();
    }

    private void GetVehiculos()
    {
        HashSet<Vehiculo> vehiculosUnicos = new HashSet<Vehiculo>();

        foreach (Service s in ServiciosAceite)
        {
            Context.Entry(s).Reference(x => x.Vehiculo).Load();
            vehiculosUnicos.Add(s.Vehiculo!);
        }
        foreach (Mecanica m in ServiciosMecanica)
        {
            Context.Entry(m).Reference(x => x.Vehiculo).Load();
            vehiculosUnicos.Add(m.Vehiculo!);
        }

        Vehiculos = vehiculosUnicos.ToList();
    }

}