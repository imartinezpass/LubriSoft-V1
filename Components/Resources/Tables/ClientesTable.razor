@using LubriSoft.Entities
@using LubriSoft.Models
@using LubriSoft.Services

@inject ILubriSoftServices DbServices
@inject ToastService ToastService

@if (ClientesFiltrados.Count == 0)
{
    <div class="alert alert-warning mb-0" role="alert">
        No hay clientes para mostrar...
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-sm table-bordered table-striped caption-top mb-0">
            <caption>Tabla de Clientes</caption>
            <thead>
                <tr style="text-align:center">
                    <th>Telefono</th>
                    <th>Nombre</th>
                    <th>Vehiculos</th>
                    <th>Acciones</th>
                </tr>   
            </thead>
            <tbody>
                @foreach (var cliente in ClientesFiltrados)
                {
                    <tr class="table-secondary" style="text-align:center">
                        <td>@cliente.Telefono</td>
                        <td>@cliente.Nombre</td>         
                        <td>
                            @if (!Vehiculos.Any(v => v.ClienteId == cliente.Telefono))
                            {
                                <span>?</span>
                            }
                            else if (Vehiculos.Count(v => v.ClienteId == cliente.Telefono) > 1)
                            {
                                <span style="text-decoration:underline; cursor:pointer" @onclick="@(() => ShowVehiculos(Vehiculos.Where(v => v.ClienteId == cliente.Telefono).ToList()))">
                                    VEHICULOS
                                </span>
                            }
                            else
                            {
                                <span>
                                    @Vehiculos.FirstOrDefault(v => v.ClienteId == cliente.Telefono)!.Patente -
                                    @Vehiculos.FirstOrDefault(v => v.ClienteId == cliente.Telefono)!.FabricanteId
                                    @Vehiculos.FirstOrDefault(v => v.ClienteId == cliente.Telefono)!.ModeloId
                                    @Vehiculos.FirstOrDefault(v => v.ClienteId == cliente.Telefono)!.Version
                                </span>
                            }
                        </td>
                        <td>
                            <div class="container" style="white-space:nowrap">
                                <button class="btn btn-dark" @onclick="@(() => ClienteEdit(cliente))"><IconEdit /></button>
                                <button class="btn btn-danger" @onclick="@(() => ClienteDelete(cliente))"><IconDelete /></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<Modal @ref="ModalEdit" title="Editar Cliente" CloseOnEscape="false" Size="ModalSize.ExtraLarge" OnHiding="ResetModel">
    <BodyTemplate>
        <div class="row">
            <h3>Datos del Cliente</h3>
            <ClientesForm OnValidatedForm="ConfirmEdit" FormId="ClienteEdit" ClienteExistente="ClienteContext" KeyDisabled="true" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-lg btn-dark" form="ClienteEdit">Guardar</button>
    </FooterTemplate>
</Modal>

<Modal @ref="ModalDelete" title="Eliminar Cliente" CloseOnEscape="false">
    <BodyTemplate>
        ¿Está seguro de que desea eliminar el cliente @ClienteContext!.Nombre?
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-lg btn-danger" @onclick="ConfirmDelete">Eliminar</button>
    </FooterTemplate>
</Modal>

<Modal @ref="ModalVehiculo" title="Vehiculos del Cliente" CloseOnEscape="false">
    <BodyTemplate>
        @foreach(Vehiculo v in VehiculosFiltrados)
        {
            <div class="col-12 mb-3">@v.Patente - @v.FabricanteId @v.ModeloId @v.Version</div>
        }
    </BodyTemplate>
</Modal>

@code {

    [Parameter]
    public List<Cliente> Clientes { get; set; } = new();

    [Parameter]
    public List<Cliente> ClientesFiltrados { get; set; } = new();

    [Parameter]
    public List<Vehiculo> Vehiculos { get; set; } = new();

    public List<Vehiculo> VehiculosFiltrados { get; set; } = new();

    private Cliente? ClienteContext;

    private Modal ModalEdit = default!;
    private Modal ModalDelete = default!;
    private Modal ModalVehiculo = default!;

    public async void ShowVehiculos(List<Vehiculo> vehiculos)
    {
        VehiculosFiltrados = new List<Vehiculo>(vehiculos);
        await ModalVehiculo.ShowAsync();
    }

    //Reinicia el form
    public async void ResetModel()
    {
        await ModalEdit.HideAsync();
    }

    //Dispara Modal de edicion
    public async void ClienteEdit(Cliente cliente)
    {
        ClienteContext = cliente;
        await ModalEdit.ShowAsync();
    }

    //Dispara Modal de confirmacion
    public async void ClienteDelete(Cliente cliente)
    {
        ClienteContext = cliente;
        await ModalDelete.ShowAsync();
    }

    //Update Cliente
    private async Task ConfirmEdit(Entities.Cliente editedCliente)
    {
        Cliente c = new Cliente
        {
            Telefono = editedCliente.Telefono,
            Nombre = editedCliente.Nombre,         
        };

        var result = await DbServices.UpdateCliente(c);

        if(result == true)
        {
            ToastService.Notify(new(ToastType.Success, $"Se modificó el cliente"));
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: el cliente no existe"));
        }

        await ModalEdit.HideAsync();
    }

    //Delete Cliente
    private async Task ConfirmDelete()
    {
        try
        {
            var result = await DbServices.DeleteCliente(ClienteContext!.Telefono);

            if (result == true)
            {
                var clientes = ClientesFiltrados.FirstOrDefault(x => x.Telefono == ClienteContext.Telefono);
                if (clientes != null)
                {
                    ClientesFiltrados.Remove(clientes);
                    Clientes.Remove(clientes);
                }

                ToastService.Notify(new(ToastType.Danger, $"Se eliminó el cliente"));
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"Error: el cliente no existe o posee referencias"));
            }
        }
        catch
        {
            ToastService.Notify(new(ToastType.Danger, $"Se produjo un error al intentar eliminar el cliente"));
        }
        await ModalDelete.HideAsync();
        StateHasChanged();
    }

}