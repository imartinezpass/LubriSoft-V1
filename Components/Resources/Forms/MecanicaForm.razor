@using LubriSoft.Entities
@using LubriSoft.Models
@using System.Text.RegularExpressions

<EditForm Model="@MecanicaModel" OnValidSubmit="RegistrarMecanica" id="@FormId">
    <DataAnnotationsValidator />
    <div class="row">
        <MecanicaFormControls MecanicaModel="MecanicaModel" PatenteVerificada="@PatenteForm" />
    </div>
</EditForm>

@code {

    [Parameter]
    public string? FormId { get; set; }

    [Parameter]
    public EventCallback<Mecanica> OnValidatedForm { get; set; }

    [Parameter]
    public Mecanica? ModeloExistente { get; set; }

    [Parameter]
    public string PatenteForm { get; set; } = string.Empty;

    [Parameter]
    public MecanicaViewModel MecanicaModel { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (ModeloExistente != null)
        {
            MecanicaModel.Fecha = ModeloExistente.Fecha!;
            PatenteForm = ModeloExistente.Patente!;
            MecanicaModel.KilometrajeActual = ModeloExistente.KilometrajeActual;
            MecanicaModel.TipoTrabajo = ModeloExistente.TipoTrabajo;
            MecanicaModel.Detalle = ModeloExistente.Detalle!;
        }
        await base.OnParametersSetAsync();
    }

    public async Task RegistrarMecanica(EditContext editContext)
    {
        DateTime horaActual = DateTime.Now;

        Mecanica m = new Mecanica
        {
            Fecha = new DateTime(MecanicaModel.Fecha.Year, MecanicaModel.Fecha.Month, MecanicaModel.Fecha.Day, horaActual.Hour, horaActual.Minute, horaActual.Second),
            Patente = PatenteForm.ToUpper(),
            KilometrajeActual = MecanicaModel.KilometrajeActual,
            TipoTrabajo = MecanicaModel.TipoTrabajo,
            Detalle = MecanicaModel.Detalle.ToUpper().Trim()
        };

        await OnValidatedForm.InvokeAsync(m);
    }

}